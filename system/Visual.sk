import:
	org.bukkit.Bukkit
	org.bukkit.Color
	org.bukkit.FireworkEffect
	org.bukkit.FireworkEffect$Type
	ch.njol.skript.Skript
	org.inventivetalent.glow.GlowAPI
	org.inventivetalent.glow.GlowAPI$Color as GlowColor
	com.gmail.filoghost.holographicdisplays.api.Hologram
	com.gmail.filoghost.holographicdisplays.api.HologramsAPI
options:
	PARTICLE_DISTANCE: 70

#!! 홀로그램
function createHologram(id: text, loc: location, texts: text, visible: boolean=true):
	if {-holo::%{_id}%} is not set:
		set {-holo::%{_id}%} to HologramsAPI.createHologram(Skript.getPlugin(Skript.class), {_loc})
		set {_lines::*} to {_texts} split by "||"
		loop {_lines::*}:
			{-holo::%{_id}%}.appendTextLine(loop-value)
		{-holo::%{_id}%}.getVisibilityManager().setVisibleByDefault({_visible})
function editHologram(id: text, texts: text):
	{-holo::%{_id}%}.clearLines()
	set {_lines::*} to {_texts} split by "||"
	loop {_lines::*}:
		{-holo::%{_id}%}.appendTextLine(loop-value)
function deleteHologram(id: text):
	if {-holo::%{_id}%} is set:
		{-holo::%{_id}%}.delete()
		delete {-holo::%{_id}%}
		delete {-holobind::%{_id}%}
function bindHologram(id: text, entity: entity, x: number=0, y: number=0, z: number=0):
	if {-holo::%{_id}%} is set:
		set {-holobind::%{_id}%} to {_entity}
		while {-holobind::%{_id}%} = {_entity}:
			if {-holo::%{_id}%} is not set:
				exit
			if {_entity} is dead:
				exit
			{-holo::%{_id}%}.teleport({_entity}.getLocation().add({_x}, {_y}, {_z}))
			wait 1 tick
function showHologram(id: text, visible: boolean, player: player):
	if {_visible} is true:
		{-holo::%{_id}%}.getVisibilityManager().showTo({_player})
	else:
		{-holo::%{_id}%}.getVisibilityManager().hideTo({_player})
function clearHolograms():
	loop {-holo::*}:
		(loop-value).delete()
	delete {-holo::*}
	delete {-holobind::*}
#!! 파티클
function particle(particle: text, loc: location, xd: number, yd: number, zd: number, speed: number, count: integer):
	drawDot count {_count}, particle "%{_particle}%", speed {_speed}, XYZ {_xd}, {_yd}, {_zd}, center location of {_loc}, visibleRange {@PARTICLE_DISTANCE}, keepFor 0 tick
function particle_P(particle: text, loc: location, xd: number, yd: number, zd: number, speed: number, count: integer, player: player):
	drawDot count {_count}, particle "%{_particle}%", speed {_speed}, XYZ {_xd}, {_yd}, {_zd}, center {_loc}, isSingle true, {_player}, visibleRange {@PARTICLE_DISTANCE}, keepFor 0 tick
function particleRGB(loc: location, xd: number, yd: number, zd: number, r: number, g: number, b: number, count: integer):
	if {_count} > 1:
		loop {_count} times:
			set {__xd} to random number between 0-{_xd} and {_xd}
			set {__yd} to random number between 0-{_yd} and {_yd}
			set {__zd} to random number between 0-{_zd} and {_zd}
			drawDot particle "redstone", speed {_speed}, RGB {_r}, {_g}, {_b}, center {_loc}~vector {__xd}, {__yd}, {__zd}, visibleRange {@PARTICLE_DISTANCE}, keepFor 0 tick
	else:
		drawDot particle "redstone", speed {_speed}, RGB {_r}, {_g}, {_b}, center {_loc}, visibleRange {@PARTICLE_DISTANCE}, keepFor 0 tick
function particleRGB_P(loc: location, xd: number, yd: number, zd: number, r: number, g: number, b: number, count: integer, player: player):
	if {_count} > 1:
		loop {_count} times:
			set {__xd} to random number between 0-{_xd} and {_xd}
			set {__yd} to random number between 0-{_yd} and {_yd}
			set {__zd} to random number between 0-{_zd} and {_zd}
			drawDot particle "redstone", speed {_speed}, RGB {_r}, {_g}, {_b}, center {_loc}~vector {__xd}, {__yd}, {__zd}, isSingle true, {_player}, visibleRange {@PARTICLE_DISTANCE}, keepFor 0 tick
	else:
		drawDot particle "redstone", speed {_speed}, RGB {_r}, {_g}, {_b}, center {_loc}, isSingle true, {_player}, visibleRange {@PARTICLE_DISTANCE}, keepFor 0 tick
function particleSpellRGB(loc: location, xd: number, yd: number, zd: number, r: number, g: number, b: number, count: integer):
	if {_count} > 1:
		loop {_count} times:
			set {__xd} to random number between 0-{_xd} and {_xd}
			set {__yd} to random number between 0-{_yd} and {_yd}
			set {__zd} to random number between 0-{_zd} and {_zd}
			drawDot particle "mobspell", speed {_speed}, RGB {_r}, {_g}, {_b}, center {_loc}~vector {__xd}, {__yd}, {__zd}, visibleRange {@PARTICLE_DISTANCE}, keepFor 0 tick
	else:
		drawDot particle "mobspell", speed {_speed}, RGB {_r}, {_g}, {_b}, center {_loc}, visibleRange {@PARTICLE_DISTANCE}, keepFor 0 tick
function particleSpellRGB_P(loc: location, xd: number, yd: number, zd: number, r: number, g: number, b: number, count: integer, player: player):
	if {_count} > 1:
		loop {_count} times:
			set {__xd} to random number between 0-{_xd} and {_xd}
			set {__yd} to random number between 0-{_yd} and {_yd}
			set {__zd} to random number between 0-{_zd} and {_zd}
			drawDot particle "mobspell", speed {_speed}, RGB {_r}, {_g}, {_b}, center {_loc}~vector {__xd}, {__yd}, {__zd}, isSingle true, {_player}, visibleRange {@PARTICLE_DISTANCE}, keepFor 0 tick
	else:
		drawDot particle "mobspell", speed {_speed}, RGB {_r}, {_g}, {_b}, center {_loc}, isSingle true, {_player}, visibleRange {@PARTICLE_DISTANCE}, keepFor 0 tick
function particleBlock(block: itemtype, loc: location, xd: number, yd: number, zd: number, speed: number, count: integer):
	drawDot count {_count}, particle "blockdust", material {_block}, speed {_speed}, XYZ {_xd}, {_yd}, {_zd}, center {_loc}, visibleRange {@PARTICLE_DISTANCE}, keepFor 0 tick
function particleBlock_P(block: text, loc: location, xd: number, yd: number, zd: number, speed: number, count: integer, player: player):
	drawDot count {_count}, particle "blockdust", material {_block}, speed {_speed}, XYZ {_xd}, {_yd}, {_zd}, center {_loc}, isSingle true, {_player}, visibleRange {@PARTICLE_DISTANCE}, keepFor 0 tick
#!! 폭죽
function firework(loc: location, r: number, g: number, b: number, fr: number, fg: number, fb: number, effect: integer=0, trail: boolean=false, flicker: boolean=false):
	spawn a firework at {_loc}
	set {_fw} to spawned firework
	{_fw}.setSilent(true)
	set {_fwm} to spawned firework.getFireworkMeta()

	if {_effect} = 0:
		set {_effect} to Type.BALL
	if {_effect} = 1:
		set {_effect} to Type.BALL_LARGE
	if {_effect} = 2:
		set {_effect} to Type.BURST
	if {_effect} = 3:
		set {_effect} to Type.CREEPER
	if {_effect} = 4:
		set {_effect} to Type.STAR
	{_fwm}.addEffect(FireworkEffect.builder().with({_effect}).withColor(Color.fromRGB({_r}, {_g}, {_b})).withFade(Color.fromRGB({_fr}, {_fg}, {_fb})).flicker({_flicker}).trail({_trail}).build())
	{_fw}.setFireworkMeta({_fwm})

	wait 1 tick
	{_fw}.detonate()
#!! 발광 효과
function setGlowing(entity: entity, target: player, color: text="white"):
	if {_color} is "red":
		GlowAPI.setGlowing({_entity}, GlowColor.RED, {_target})
	else if {_color} is "yellow":
		GlowAPI.setGlowing({_entity}, GlowColor.YELLOW, {_target})
	else if {_color} is "green":
		GlowAPI.setGlowing({_entity}, GlowColor.GREEN, {_target})
	else if {_color} is "blue":
		GlowAPI.setGlowing({_entity}, GlowColor.BLUE, {_target})
	else if {_color} is "cyan":
		GlowAPI.setGlowing({_entity}, GlowColor.AQUA, {_target})
	else if {_color} is "white":
		GlowAPI.setGlowing({_entity}, GlowColor.WHITE, {_target})
function resetGlowing(entity: entity, target: player):
	GlowAPI.setGlowing({_entity}, null, {_target})
#!! 블록 파괴 이펙트
function blockBreak(loc: location, level: integer):
	set {_packet} to new play_server_block_break_animation packet
	set location pinfo 0 of {_packet} to {_loc}
	if getMetadata(block at {_loc}, "blockbreak") is not set:
		setMetadata(block at {_loc}, "blockbreak", random integer between 0 to 1000)
	set int pnum 0 of {_packet} to parseInt("%getMetadata(block at {_loc}, "blockbreak")%")
	set int pnum 1 of {_packet} to {_level}
	send packet {_packet} to all players
#!! 블록 피격 이펙트
function bulletHit(loc: location, block: block, sound: boolean=true):
	if "%type of {_block}%" parsed as item is not set:
		set {_block} to type of {_block}
	else:
		set {_block} to "%type of {_block}%" parsed as item

	if {_sound} is true:
		playSound("random.gun.ricochet", {_loc}, 0.8, random number between 0.975 to 1.025)
	particleBlock({_block}, {_loc}, 0, 0, 0, 0.1, 3)
	particle("townaura", {_loc}, 0, 0, 0, 0, 10)

	if {_sound} is true:
		if {_block} is grass block or any leaves or sponge or hay bale:
			playSound("block.grass.break", {_loc}, 0.8, random number between 0.7 to 0.8)
		if {_block} is gravel or dirt or sand or clay block:
			playSound("block.gravel.break", {_loc}, 0.8, random number between 0.7 to 0.8)
		else if {_block} is any stone or any cobblestone or cobblestone wall or any stone brick or cobblestone slab or stone slab or double stone slab or brick block or brick stairs or brick slab or any quartz block or any stained clay block or coal block or any sandstone or any red sandstone or sandstone slab or red sandstone slab:
			playSound("block.stone.break", {_loc}, 1, random number between 0.9 to 1)
		else if {_block} is iron block or gold block or iron door or anvil or iron trapdoor or cauldron or hopper:
			playSound("entity.zombie.attack_iron_door", {_loc}, 0.5, random number between 1.95 to 2)
			playSound("random.metalhit", {_loc}, 0.8, random number between 1.95 to 2)
		else if {_block} is any wool or any carpet:
			playSound("block.cloth.break", {_loc}, 1, random number between 0.8 to 0.9)
		else if {_block} is oak wooden plank or spruce wooden plank or birch wooden plank or jungle wooden plank or dark oak wooden plank or acacia wooden plank or any wooden slab or any fence or any wooden door or chest or any log or bookshelf:
			playSound("block.wood.break", {_loc}, 0.8, random number between 0.8 to 0.9)
			playSound("random.stab", {_loc}, 0.8, random number between 1.95 to 2)
		else if {_block} is glass or any stained glass block or any redstone lamp or ice or sea lantern:
			playSound("block.glass.break", {_loc}, 0.8, random number between 0.7 to 0.8)
function meleeHit(loc: location, block: block, strong: boolean=false, sound: boolean=true):
	if "%type of {_block}%" parsed as item is not set:
		set {_block} to type of {_block}
	else:
		set {_block} to "%type of {_block}%" parsed as item

	if {_strong} is true:
		particleBlock({_block}, {_loc}, 0.08, 0.08, 0.08, 0.1, 15)
		particle("townaura", {_loc}, 0.08, 0.08, 0.08, 0, 50)
		if {_sound} is true:
			playSound("entity.player.attack.strong", {_loc}, 1, random number between 0.875 to 0.925)
	else:
		particleBlock({_block}, {_loc}, 0.05, 0.05, 0.05, 0.1, 6)
		particle("townaura", {_loc}, 0.05, 0.05, 0.05, 0, 20)
		if {_sound} is true:
			playSound("entity.player.attack.weak", {_loc}, 0.8, random number between 0.875 to 0.925)

	if {_sound} is true:
		if {_block} is grass block or any leaves or sponge or hay bale:
			playSound("block.grass.break", {_loc}, 0.8, random number between 0.7 to 0.8)
		if {_block} is gravel or dirt or sand or clay block:
			playSound("block.gravel.break", {_loc}, 0.8, random number between 0.7 to 0.8)
		else if {_block} is any stone or any cobblestone or cobblestone wall or any stone brick or cobblestone slab or stone slab or double stone slab or brick block or brick stairs or brick slab or any quartz block or any stained clay block or coal block or any sandstone or any red sandstone or sandstone slab or red sandstone slab:
			playSound("block.stone.break", {_loc}, 1, random number between 0.9 to 1)
		else if {_block} is iron block or gold block or iron door or anvil or iron trapdoor or cauldron or hopper:
			playSound("entity.zombie.attack_iron_door", {_loc}, 0.5, random number between 1.95 to 2)
			playSound("random.metalhit", {_loc}, 0.8, random number between 1.95 to 2)
		else if {_block} is any wool or any carpet:
			playSound("block.cloth.break", {_loc}, 1, random number between 0.8 to 0.9)
		else if {_block} is oak wooden plank or spruce wooden plank or birch wooden plank or jungle wooden plank or dark oak wooden plank or acacia wooden plank or any wooden slab or any fence or any wooden door or chest or any log or bookshelf:
			playSound("block.wood.break", {_loc}, 0.8, random number between 0.8 to 0.9)
			playSound("random.stab", {_loc}, 0.8, random number between 1.95 to 2)
		else if {_block} is glass or any stained glass block or any redstone lamp or ice or sea lantern:
			playSound("block.glass.break", {_loc}, 0.8, random number between 0.7 to 0.8)